                          Carousel MicroTools, Inc.

                                    eee(((eeeddd)))

                                 ttteeexxxttt eeedddiiitttooorrr

SSSYYYNNNOOOPPPSSSIIISSS        
  e [-] [file]

  This editor is called ed on other Software Tools implementations.  It is
  called e on Carousel's CP/M implementation to avoid conflict with CP/M's
  editor ed. 

DDDEEESSSCCCRRRIIIPPPTTTIIIOOONNN        
  e is a powerful, line-oriented text editor.  One prominent feature is the
  ability to use  regular expressions to specifiy strings of characters to be
  matched when making substitutions or searching for or specifying lines.
  These can be specified with special characters to generalize or limit
  searches.  The same form of regular expressions are used with all Tools
  that use string pattern matching (ch, fb, find, ls, sedit, etc.). 

  If file is given, it is read into a buffer to be edited, and its name is
  remembered for possible use by subsequent commands.  e operates on a copy
  of the file it is editing; changes made in the copy have no effect on the
  file until a write (w) command is given.  e accepts commands from script
  files on standard input as well as from a terminal.  To do this, invoke e
  and enter the script file name following file as follows:

    e [-] [file] < script

  The optional dash (-) suppresses the printing of line counts by the edit
  (e), read (r), and write (w) commands.  This is useful for debugged editor
  scripts and pipelines. 

  ____Line _________Addresses       
  Commands to e have a simple and regular structure: zero, one, or two line
  addresses followed by a single character command, possibly followed by
  parameters to the command.  The structure is:

    [line],[line]command [parameters]

  line specifies the number or address of a line in the buffer.  Every
  command that requires addresses has default addresses, so the addresses can
  often be omitted.  e line addresses may be specified by any of the
  following:

  .       the "current" line
  17      a decimal number
  $       the last line in the file
  /pat/   search forward for a line containing the regular expression pat
  \pat\   search backward for a line containing the regular expression pat
  line+N  N lines forward from line, where line is specified using one of the
          methods above
  line-N  N lines backward from line, where line is specified using one of
          the methods above

  Line numbers may be separated by commas or semicolons; a semicolon sets the
  current line to the first address specified before the next address is
  interpreted.  This feature can be used to set the starting line for forward
  and backward context searches. 

  Some examples of line addresses:

  .,+3    the current line through the third line after it
  1,+3    the first line through the third line after the current line
  1;+3    the first line through the third line after it (i.e., line number
          4)
  1,$     the first line through the last line (i.e., all lines)
  $-1,$   The next to last line through the last line
  /abc/,/def/
          from the next line containing abc through the following line
          containing def
  \xyz\,\abc\
          from the first line, going backwards from the current line,
          containing xyz through first line preceeding it containing abc
  \mno\,/abc/
          from the first line, going backwards from the current line,
          containing mno through the first line following it containing abc

  _______Regular ___________Expressions       
  e supports a form of regular expression notation for specifying patterns in
  line addresses and some commands.  A regular expression specifies a set of
  strings of characters.  That is, regular expressions can be created that
  can be used to locate or change patterns only at particular positions on a
  line, patterns which contain certain characters plus perhaps others, or
  that match strings of indefinite length.  Regular expressions are
  constructed as follows:

  1) An ordinary character (not one of those discussed below) is a regular
  expression and matches that character.  E.g., /a/ matches the next
  occurance of the letter a. 

  2) A percent (%) at the beginning of a regular expression matches the empty
  string at the beginning of a line.  E.g., /%a/ matches the letter a at the
  beginning of a line. 

  3) A dollar sign ($) at the end of a regular expression matches the end of
  a line.  E.g., /.$/ matches a period at the end of a line. 

  4) A question mark (?) matches any character except a newline character.
  E.g., /th??/ matches then, anthem, theatre, etc. 

  5) An asterisk (*) following any character matches any number (including
  zero) of adjacent occurences of the character it follows.  E.g., /?*/
  matches anything; /%?*c/ matches any number and combination of characters
  at the beginning of a line followed by c and also matches c at the
  beginning of a line; ///...  ***$$$/// matches a period followed by one or more
  blanks at the end of a line. 

  6) A string of characters enclosed in square brackets ([]) matches any
  character in the string but no others.  If, however, the first character of
  the string is an exclamation point (!), the regular expression matches any
  character except the characters in the string (and the newline).  A range
  of characters in ASCII order may be specified by inserting a dash (-)
  between the upper- and lower-limit characters (e.g., a-z would specify the
  range from a through z').  E.g., /[abc]/ matches any occurance of a or b or
  c'; /[a-c]/ will do the same; /[!a-c]/ matches all other characters. 

  7) The concatenation of regular expressions is a regular expression which
  matches the concatenation of the strings matched by the components of the
  regular expression.  E.g., /%[A-Z]?c/ matches lines beginning with capital
  letters and having c as the third letter in the line. 

  8) The null regular expression standing alone is equivalent to the last
  regular expression encountered.  E.g., //'. 

  9) An at sign (@) before any of the above special characters (% $ ? * [) in
  a regular expression causes that character to be considered literally.  An
  @ will be taken literally when entered as @@. 

  SSSuuummmmmmaaarrryyy ooofff SSSpppeeeccciiiaaalll CCChhhaaarrraaacccttteeerrrsss     
  _________Character   _____Usage
  ?           Matches any character (except newline)
  %           Indicates beginning of line
  $           Indicates end of line
  [...]       Character class (any one of these characters)
  [!...]      Negated character class (any character except these)
  *           Zero or more occurances of the preceeding character
  c1-c2       Range of characters between c1 and c2 (used in [...])
  @           Escaped character (e.g., @%, @[, @*)

  The special meanings of these characters can be escaped when the characters
  are preceded by an at sign (@) or in the following special cases:

  _________Character   ____When ___Not _______Special
  %           When not at beginning
  $           When not at end
  *           When at beginning
  !           When not at beginning of string inside square brackets, [ ]
  -           When at beginning or end of string inside square brackets, [ ]

  The following use regular characters to create special escape sequences
  within regular expressions and replacement text. 

  @n          newline
  @t          tab

  CCCOOOMMMMMMAAANNNDDDSSS        
  The following are used to indicate default addresses for the commands. 
   (.)     use current line
   (.+1)   use the next line
   (.,.)   use current line for both line numbers
   (1,$)   use all lines

  (.)a
  <text>
  . 
  The append command reads the given text and appends it after the addressed
  line.  A period is typed alone on the last line to end the input.  The last
  line input becomes the current line. 

  (.)b[+|.|-][screensize]
  The browse (b) command is a shorthand command to print out a screenful of
  data.  It has three basic forms, any of which may have a number screensize
  appended to it.  The default screensize is 23.  A simple b (or b+') prints
  the the current line and the screenful after it.  A b- prints the screen of
  text preceding (and including) the addressed line.  A b.'prints the screen
  centered on the addressed line.  If a screensize is specified, it becomes
  the default screensize for the rest of the editing session or until changed
  again.  The last line printed becomes the current line. 

  (.,.)c
  <text>
  . 
  The change (c) command deletes the addressed lines, then accepts input text
  which replaces these lines.  A period is typed alone on the last line to
  end input.  The last line input becomes the current line. 

  (.,.)d
  The delete (d) command deletes the addressed lines from the buffer.  The
  line originally after the last line deleted becomes the current line;
  however, if the lines deleted were originally at the end, the new last line
  becomes the current line. 

  e filename
  The edit (e) command causes the entire contents of the buffer to be deleted
  and then the named file to be read in.  The number of lines read is typed.
  The file name is remembered for possible use as a default file name in a
  subsequent read (r) or write (w) command.  The last line entered into the
  buffer becomes the current line. 

  f filename
  If a file name is not given, the file (f) command prints the currently
  remembered file name.  If a file name is given, the currently remembered
  file name is changed to the new file name. 

  (1,$)g/regular expression/command
  In the global (g) command, the specified command is executed on every line
  that matches the regular expression.  Multiple commands may be executed by
  placing each on a succeeding line and terminating each command except the
  last with an at sign (@). 

  (.)i
  <text>
  . 
  The insert (i) command inserts the text before the addressed line.  This
  command differs from the append (a) command only in the placement of text.
  A period is typed alone on the last line to end input.  The last line input
  becomes the current line. 

  (.,.)k<address>
  The kopy (k) command copies the addressed lines to the position after the
  line specified by <address>.  The last of the copied lines becomes the
  current line. 

  (.,.)m<address>
  The move (m) command repositions the addressed lines after the line
  specified by <address>.  The last of the moved lines becomes the current
  line. 

  (.,.)p
  The print (p) command prints the addressed lines.  This command may be
  placed at the end of other commands to cause printing of the last line
  affected by the command.  The last line printed becomes the current line.
  E.g., s/abc/def/p

  q
  The quit (q) command causes e to exit.  If the file has not been written
  since it was changed, the user is given a chance to do so. 

  (.)r filename
  The read (r) command reads in the specified file and places the text after
  the addressed line.  If no file name is given, the remembered file name is
  used (see the edit (e) and file (f) commands).  The remembered file name is
  not changed.  Address '0' is legal for this command and causes the file to
  be read in at the beginning of the buffer.  If the read is successful, the
  number of lines read is typed.  The last line read into the buffer becomes
  the current line. 

  (.,.)s/regular expression/replacement/
  (.,.)s/regular expression/replacement/g
  The substitute (s) command searches each addressed line for an occurrence
  of the specified regular expression.  On each line in which a match is
  found, the first occurrence of the expression is replaced by the specified
  replacement.  If the global (g) command indicator appears after the
  command, all occurrences of the regular expression are replaced within the
  specified range.  Any character other than space or newline may be used
  instead of the slash '/' to delimit the regular expression and
  replacement.  A question mark '?' is printed if the substitution fails on
  all addressed lines.  The last line substituted becomes the current line.
  If the regular expression is not specified (e.g. s//pat/), the last regular
  expression given is used. 

  An ampersand (&) appearing in the replacement is replaced by the string
  that matched the regular expression.  (The special meaning of the ampersand
  (&) in this context may be suppressed by preceding it by an at (@) sign.)
  E.g., s/[0-9]/$&/ will place a dollar sign before the first digit in the
  line. 

  Lines may be split or merged by using the symbol '@n' to stand for the
  newline character at the end of a line.  E.g., s/@n/ / will join two lines,
  leaving a space between the words. 

  (1,$)w filename
  The write (w) command writes the addressed lines onto the specified file.
  If the file does not exist, it is created.  The remembered file name is not
  changed.  If no file name is given, the remembered file name is used (see
  the edit (e) and file (f) commands).  The current line is left unchanged.
  If the command is successful, the number of lines written is typed. 

  (1,$)x/regular expression/command
  The except (x) command is the same as the global command except that the
  command is executed for every line except those matching the regular
  expression. 

  (.)=
  The line number of the addressed line is typed.  The current line is left
  unchanged.  E.g., =p prints the current line and its line number. 

  # comment
  The remainder of the line after the sharp (#) sign is a comment and ignored
  by the editor.  This allows e scripts to be commented for future
  enlightenment. 

  (.+1)<carriage return>
  An address alone on a line causes the addressed line to be printed.  A
  carriage return alone is equivalent to .+1 and thus is useful for stepping
  through text. 

  $n
  Several temporary buffers (i.e. files) are available for writing into and
  reading from.  The buffers are referred to as $1, $2, ...$N (where N is
  determined by the MAXTBUFS definition in the source code).  These buffers
  can be used in place of normal file names on the e, f, r, and w commands. 

  SSSCCCRRRAAATTTCCCHHH AAANNNDDD SSSYYYSSSTTTEEEMMM DDDAAATTTAAA FFFIIILLLEEESSS    
  eds.$$$ is used to hold the text being edited. 

  edN.$$$, where 1 <= N <= MAXTBUFS, are used for temporary buffers. 

  SSSEEEEEE AAALLLSSSOOO       
  ch - change strings in text files
  fb - search for blocks of lines with text patterns
  find - search lines for text patterns
  ls - list the files in a directory
  sedit - stream editor
  A Tutorial Introduction to the Software Tools Text Editor

  DDDIIIAAAGGGNNNOOOSSSTTTIIICCCSSS        
  file size exceeded
  printed whenever the maximum number of lines allowed has been exceeded.
  The number of lines allowed is determined by the MAXBUF definition in the
  source code. 

  A message is printed whenever the user attempts to quit without writing a
  file that was changed.  The user must retype the command as a
  verification. 

  A question mark (?) is printed whenever a command fails or is not
  understood. 

  CCCHHHAAANNNGGGEEESSS        
  The Carousel editor differs from the one originally provided in ________Software
  _____Tools in the following ways:

  1) Both upper and lower case commands are recognized. 

  2) The user is reminded to rewrite a file if necessary before quitting. 

  3) The browse (b) and kopy (k) commands have been included, as well as
  temporary buffers ($N) and comments (#). 

  4) Multiple commands to be executed upon a single global search have been
  added. 

  LLLIIIMMMIIITTTAAATTTIIIOOONNNSSS AAANNNDDD DDDEEEFFFIIICCCIIIEEENNNCCCIIIEEESSS      
  Problems sometimes occur when removing or inserting newline characters (via
  @n), especially in global (g, x) commands. 

  The kopy (k) command will not work if the destination line is among those
  to be copied (e.g., "1,6k6").  In this case, one solution is to use
  temporary buffers.  For example,
  1,6 w $1
  6 r $1

  eee CCCOOOMMMMMMAAANNNDDD SSSUUUMMMMMMAAARRRYYY      

  _________Addresses        
  .       current line
  17      a decimal number
  $       the last line of the file
  /pat/   search forward for line containing pat
  \pat\   search backward for line containing pat
  line+n  n lines forward from line
  line-n  n lines backward from line

  _______Default _________Addresses       
  (.)     use current line
  (.+1)   use the next line
  (.,.)   use current line for both line numbers
  (1,$)   use all lines

  ________Commands        
  (.)a         append text after line (text follows)
  (.)bCN       browse from addressed line, displaying N number of lines
            (default is 23).  C may be a dash (-) to specify printing the
            previous screenful of information, a plus (+) to specify printing
            the following screenful of information, or a period (.) to
            specify printing a screenful centered on the addressed line. 
  (.,.)c       change text (text follows)
  (.,.)d       delete text
  e file       discard current text, read in "file"
  f            print file name
  f file       remember file name
  (1,$)g/pat/command
            do "command" on lines containing "pat" (except a, c, i, q
            commands)
  (.)i         insert text before line (text follows)
  (.,.)k line3 copy text to after "line3"
  (.,.)m line3 move text to after "line3"
  (.,.)p       print text (can be appended to other commands)
  q            quit
  (.)r file    read "file", putting text after addressed line
  (.,.)s/pat/new/gp
            substitute "new" for "pat" (g means all occurences and p means
            print the lines)
  (1,$)w file  write addressed lines to "file" (if "file" is not given, write
            to current filename)
  (.)=p        print line number, current line
  (1,$)x/pat/command
            do "command" on lines not containing "pat" (except a, c, i, q
            commands)
  (.+1)<CR>    print next line
  # ...        comment
