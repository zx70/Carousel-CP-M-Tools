.TH TUTORIAL ed_Tutorial
.TL
A TUTORIAL INTRODUCTION to the SOFTWARE TOOLS TEXT EDITOR
.TE
.sp 2
B. W. Kernighan
.br
Bell Laboratories
.br
.sp
and
.br
.sp
M. J. Gralia
.br
Applied Physics Laboratory
.br
Johns Hopkins University
.sp 2
.SH
INTRODUCTION
.PP
.ul
ed
is a "text editor", that is, an interactive program
for creating and modifying "text", using directions
provided by a user at a terminal.  The text is often
a document like this one, or a program or perhaps
data for a program.
.PP
This introduction is meant to simplify learning
.ul
ed.
The
recommended way to learn
.ul
ed
is to read this document,
simultaneously using
.ul
ed
to follow the examples,
then to read the description in section I of the Software Tools manual, all the
while experimenting with
.I ed.
(Solicitation of advice from
experienced users is also useful.)
.PP
Do the exercises!  They cover material not completely
discussed in the actual text.  An appendix summarizes the commands.
.SH
DISCLAIMER
.PP
This is an introduction and a tutorial.
For this reason, no attempt is made to cover more than
a part of the facilities that
.ul
ed
offers (although
this fraction includes the most useful and
frequently used parts).  Also, there is not enough
space to explain basic Software Tools procedures.
We will assume
that you know how to log on and access the Software Tools, and that
you have at least a vague understanding of what a file is.
.PP
You must also know what character to type as the
end-of-line on your particular terminal.  It
is almost always a "return".
Throughout, we will refer to
this character, whatever it is, as "newline".
.SH
CASES
.PP
And about case:  it is traditional to use both upper and
lower case characters when using the Software Tools, but
it is not required.  In describing
.ul
ed,
we will follow that
convention, but
.ul
ed
will work with either.
.PP
But a caution:
.ul
ed
differentiates cases.  If your files
contain both and your terminal is in upper case, you can
get into a "deadly embrace" situation in which you can see a
character but can't delete it.  The solution is simple -
always use both upper and lower case with Software Tools.
.SH
GETTING STARTED
.PP
We'll assume that you have logged in.
The easiest way to get
.ul
ed
is to type
\fB
ed      (followed by a newline)
\fR
.ul
ed
will indicate its readiness to accept commands by
prompting you with some character, often
a colon (:).
When you see this prompt,
you are now ready to go -
.ul
ed
is waiting for you to tell it what to do.
.SH
CREATING TEXT - the Append command "a"
.PP
As our first problem, suppose we want to create some text
starting from scratch.  Perhaps we are typing the very first
draft of a paper; clearly it will have to start somewhere,
and undergo modifications later.  This section will show how
to get some text in, just to get started.  Later
we'll talk about how to change it.
.PP
When
.ul
ed
is first started, it is rather like working with a blank piece
of paper - there is no text or information present.  This must be
supplied by the person using
.ul
ed;
it is usually done by typing in the text, or by reading
it into
.ul
ed
from a file.  We will start by typing in some text, and
return shortly to how to read files.
.PP
First a bit of terminology.  In
.I ed
jargon, the text being worked on is said to be
"kept in a buffer."  Think of the buffer as a
work space, if you like, or simply as the
information that you are going to be editing.
In effect the buffer is like the piece of paper
on which we will write things, then change
some of them, and finally file the whole
thing away for another day.
.PP
The user tells
.ul
ed
what to do to his text by typing instructions
called "commands".  Most commands consist of a single letter.
Each command is typed on a separate line.  (Sometimes
the command is preceded by information about what
line or lines of text are to be
affected - we will discuss these shortly.)
.PP
The first command is
.B
append,
written as the letter
\fB
a
\fR
all by itself.  It means
.B
"append
(or add) text lines to the buffer,
as I type them in."  Appending is rather like writing fresh
material on a piece of paper.
.PP
So to enter lines of text into the buffer, we
just type an "a" followed by a newline,
followed by the lines of text we want, like this:
\fB
.EX
	#nf
	a
	Now is the time
	for all good men
	to come to the aid of their party.
	.
.EE
\fR
The only way to stop appending is to type a
line that contains only a period.  The "."
is used to tell
.ul
ed
that we have finished appending.  (Even
experienced users forget that terminating "."
sometimes.  If
.ul
ed
seems to be ignoring you, type an extra line with
just "." on it.  You may then find you've
added some garbage lines to your text, which you'll
have to take out later.)
.PP
After the append command has been done, the
buffer will contain the three lines
\fB
Now is the time
for all good men
to come to the aid of their party.
\fR
The "a" and "." aren't there, because they are not text.
.PP
To add more text to what we already have,
just issue another "a" command, and continue typing.
(Try it now - it won't always work right until
we explain about line numbers.)
.SH
ERROR MESSAGES - "?"
.PP
If at any time you make an error in the
commands you type to
.ul
ed,
it will tell you by typing
\fB
?
\fR
This is about as cryptic as it can be, but with
practice, you can usually figure out how you
goofed.
.SH
WRITING TEXT OUT AS A FILE - the Write command "w"
.PP
It's likely that we'll want to save our text for
later use.  To write out the contents of the buffer
onto a file, we use the
.B
write
command
\fB
w
\fR
followed by the filename we want to write on.
This will copy the buffer's contents onto the
specified file (destroying any previous information on the
file).  To save the text on a file named "junk", for
example, type
\fB
w junk
\fR
Leave a space between "w" and the file name.
.ul
ed
will respond by printing the number of lines it
wrote out.  In our case,
.ul
ed
would respond with
\fB
3
\fR
Writing a file just makes a copy
of the text - the buffer's contents are not disturbed,
so we can go on adding lines to it.  This is
an important point.
.ul
ed
at all times works on a copy of a file, not the file itself.
No change in the contents of a file takes place until you give
a "w" command.  (Writing out the text onto a file from
time to time as it is being created is a good idea,
since if the system crashes or if you make some
horrible mistake, you will lose all the text in
the buffer, but any text that was written  onto a file
is relatively safe.)
.SH
LEAVING ED - the Quit command "q"
.PP
To terminate a session with
.ul
ed,
save the text you're working on by writing it onto a file
using the "w" command, and then type the command
\fB
q
\fR
which stands for
.B
quit.
At this point your buffer vanishes,
with all its text, which is why you want to write it out
before quitting.
.SH
EXERCISE 1:
.PP
Enter
.ul
ed
and create some text using
\fB
.EX
	#nf
	a
	...text...
	.
.EE
\fR
Write it out using "w".  Then leave
.ul
ed
with the "q" command, and print the file, to see that
everything worked.  (To print a file, say
\fB
cat filename
\fR
Also try
\fB
crt filename
\fR
Here, you need to enter a newline (to see the next page)
or "q" (to quit displaying the text).
.SH
READING TEXT FROM A FILE - the Edit command "e"
.PP
A common way to get text into the buffer is to
read it from a file in the file system.  This is
what you do to edit text that you saved with the "w"
command in a previous session.  The
.B
edit
command "e" fetches the entire contents of a
file into the buffer.  So if we had saved the three
lines "Now is the time", etc., with a "w"
command in an earlier session, the
.ul
ed
command
\fB
e junk
\fR
would fetch the entire contents of the file "junk"
into the buffer, and respond
\fB
3
\fR
which is the number of lines in "junk".
If
anything was already in the buffer,
it is deleted first.
.PP
If we use the "e" command to read a file into the
buffer, then we need not use a file name after a
subsequent "w" command;
.ul
ed
remembers the last file name used in an "e" command, and
"w" will write on this file.  Thus a common way to
operate is
\fB
ed
e file
[editing session]
w
q
\fR
You can find out at any time what file named
.ul
ed
is remembering by typing the
.B
file
command "f".  In our case, if we typed
\fB
f
\fR
.ul
ed
would reply
\fB
junk
\fR
.SH
READING TEXT FROM A FILE - the Read command "r"
.PP
Sometimes we want to read a file into the
buffer without destroying anything that is already
there.  This is done by the
.B
read
command "r".
The command
\fB
r junk
\fR
will read the file "junk" into the buffer; it adds it
to the buffer (after the current line).  So if we do a
read after an edit:
\fB
e junk
r junk
\fR
the buffer will contain
.B
two
copies
of the text (six lines).
\fB
Now is the time
for all good men
to come to the aid of their party.
Now is the time
for all good men
to come to the aid of their party.
\fR
Like the "w" and "e" commands, "r" prints the
number of newlines read in, after the reading
operation is complete.
.PP
Generally speaking, "r" is much less used than "e".
.SH
EXERCISE 2:
.PP
Experiment with the "e" command - try reading
and printing various files.  You may get an
error "?.", typically because you spelled the file
name wrong.  Try alternately reading and appending
to see that they work similarly.  Verify that
\fB
ed filename
\fR
is exactly equivalent to
\fB
ed
e filename
\fR
What does
\fB
f filename
\fR
do?
.SH
PRINTING THE CONTENTS OF THE BUFFER - the Print command "p"
.PP
To
.B
print
or list the contents of the buffer (or parts of
it) on the terminal, we use the print command
\fB
p
\fR
The way this is done is as follows.  We specify the
lines where we want printing to begin and where
we want it to end, separated by a comma, and
followed by the letter "p".  Thus to print the
first two lines of the buffer, for example, (that is,
lines 1 through 2) we say
\fB
1,2p
(starting line=1, ending line=2)
\fR
.ul
ed
will respond with
\fB
Now is the time
for all good men
\fR
Suppose we want to print
.B
all
the lines in the
buffer.  We could use "1,3p" as above if we knew
there were exactly 3 lines in the buffer.  But in
general, we don't know how many there are so what do we
use for the ending line number?
.ul
ed
provides a shorthand
symbol for "line number of last line in buffer" - the dollar
sign "$".  Use it this way:
\fB
1,$p
\fR
This will print
.B
all
the lines in the buffer
(line 1 to the last line.)
.PP
To print the
.B
last
line of the buffer,
we could use
\fB
$,$p
\fR
but
.ul
ed
lets us abbreviate this to
\fB
$p
\fR
We can print any single line by typing the line
number followed by a "p".  Thus
\fB
1p
\fR
produces the response
\fB
Now is the time
\fR
which is the first line of the buffer.
.PP
In fact,
.ul
ed
lets us abbreviate even further:  we can
print any single line by typing
.B
just
the line number - no need to type the letter "p".
So if we say
\fB
$
\fR
.ul
ed
will print the last line of the buffer for us.
.PP
We can also use "$" in combinations like
\fB
$-1,$p
\fR
which prints the last two lines of the buffer.
This helps when we want to see how far we got
in typing.
.SH
EXERCISE 3:
.PP
As before, create some text using the append
command and experiment with the "p" command.
You will find, for example, that you can't print
line 0 or a line beyond the end of the
buffer, and that attempts to print a buffer in
reverse order by saying
\fB
3,1p
\fR
does not work.
.SH
THE CURRENT LINE - 'Dot' or '.'
.PP
Suppose our buffer still contains the six
lines as above, that we have just typed
\fB
1,3p
\fR
and
.ul
ed
has printed the three lines for us.
Try typing just
\fB
p     (no line numbers).
\fR
This will print
\fB
to come to the aid of their party.
\fR
which is the third line of the buffer.  In fact
it is the last (most recent) line that we have done
anything with.  (We just printed it!)  We can
repeat this "p" command without line numbers,
and it will continue to print line 3.
.PP
The reason is that
.ul
ed
maintains a record of
the last line that we did anything to (in this case,
line 3, which we just printed) so that it can be
used instead of an explicit line number.  This
most recent line is referred to by the shorthand
symbol
\fB
.cc +
+ti +6
.     (pronounced "dot").
+cc .
\fR
Dot is a line number in the same way that "$"
is; it means exactly "the current line", or
loosely, "the line we most recently did something to." 
We can use it in several ways - one possibility
is to say
\fB
.EX
	.,$p
.EE
\fR
This will print all the lines from (including) the
current line to the end of the buffer.  In our case
these are lines 3 through 6.
.PP
Some commands change the value of dot, while others
do not.  The print command sets dot to the number of the
last line printed; by our last command, we would have
"." = "$" = 6.
.PP
Dot is most useful when used in combinations like this one:
\fB
.EX
	.+1     (or equivalently, .+1p)
.EE
\fR
This means "print the next line" and gives us a
handy way to step slowly through a buffer.
We can also say
\fB
.EX
	.-1     (or .-1p)
.EE
\fR
which means "print the line
.B
before
the current
line." This enables us to go backwards if we
wish.  Another useful one is something like
\fB
.EX
	.-3,.-1p
.EE
\fR
which prints the previous three lines.
.PP
Don't forget that all of these change the value
of dot.  You can find out what dot is at
any time by typing
\fB
.cc +
.=
+cc .
\fR
.ul
ed
will respond by printing the value of dot.
.PP
Let's summarize some things about the "p"
command and dot.  Essentially "p" can be preceded by
0, 1, or 2 line numbers.  If there is no line
number given, it prints the "current line", the line
that dot refers to.  If there is one line number
given (with or without the letter "p"), it prints
that line (and dot is set there); and if there are two
line numbers, it prints all the lines in that range
(and sets dot to the last line printed.) If two line
numbers are specified the first can't be bigger than the
second (see Exercise 3.)
.PP
Typing a single newline will cause printing of the
next line - it's equivalent to ".+1p".  Try it.
.SH
DELETING LINES:  the "d" command
.PP
Suppose we want to get rid of the three extra
lines in the buffer.  This is done by the
.B
delete
command
\fB
d
\fR
Except that "d" deletes lines instead of printing them,
its action is similar to that of "p".  The
lines to be deleted are specified for "d" exactly as
they are for "p":
\fB
start,end d
\fR
Thus the command
\fB
4,$d
\fR
deletes lines 4 through the end.  There are now
three lines left, as we can check by using
\fB
1,$p
\fR
And notice that "$" now is line 3!  Dot is set to the
next line after the last line deleted, unless the
last line deleted is the last line in the buffer.
In that case, dot is set to "$".
.SH
EXERCISE 4:
.PP
Experiment with "a", "e", "r", "w", "p", and "d" until
you are sure that you know what they do, and until you understand
how dot, "$", and line numbers are used.
.PP
If you are adventurous, try using line numbers
with "a", "r", and "w" as well.  You will find that
"a" will append lines
.B
after
the line number
that you specify (rather than after dot); that "r" reads
a file in
.B
after
the line number you specify
(not necessarily at the end of the buffer); and that "w"
will write out exactly the lines you specify, not
necessarily the whole buffer.  These variations are
sometimes handy.  For instance you can insert a file
at the beginning of a buffer by saying
\fB
0r filename
\fR
and you can enter lines at the beginning of the
buffer by saying
\fB
.EX
	0a
	...text...
	.
.EE
\fR
Notice that ".w" is
.B
very
different from
\fB
.EX
	.
	w
.EE
.SH
MODIFYING TEXT:  the Substitute command "s"
.PP
We are now ready to try one of the most important
of all commands - the substitute command
\fB
s
\fR
This is the command that is used to change
individual words or letters within a line or group of
lines.  It is what we use, for example, for correcting
spelling mistakes and typing errors.
.PP
Suppose that by a typing error, line 1 says
\fB
Now is th time
\fR
- the "e" has been left off "the".  We can use "s"
to fix this up as follows:
\fB
1s/th/the/
\fR
This says:  "in line 1, substitute for the characters
'th' the characters 'the'.  To verify that it works
.ul
(ed
will not print the result automatically)
we say
\fB
p
\fR
and get
\fB
Now is the time
\fR
which is what we wanted.  Notice that dot must have
been set to the line where the substitution took place,
since the "p" command printed that line.  Dot is always set
this way with the "s" command.
.PP
The general way to use the substitute command is
\fB
start,end s/change this/to this/
\fR
Whatever string of characters is between
the first pair of slashes is replaced by whatever
is between the second pair, in
.B
all
the lines between
starting line and ending line.  Only the first occurrence on each line
is changed, however.  If you want to change
.B
every
occurrence,
see Exercise 5.  The rules for
line numbers are the same as those for "p", except that dot
is set to the last line changed. (But there is a trap for the
unwary:  if no substitution took place, dot is
.B
not
changed.  This causes an error "?" as a warning.)
.PP

Thus we can say
\fB
1,$s/speling/spelling/
\fR
and correct the first spelling mistake on each line in the text.
(This is useful for people who are consistent misspellers!)
.PP
If no line numbers are given, the "s" command assumes we
mean "make the substitution on line dot", so it changes things
only on the current line.  This leads to the very common sequence
\fB
s/something/something else/p
\fR
which makes some correction on the current line, and
then prints it, to make sure it worked out right.
If it didn't, we can try again.  (Notice that we put
a print command on the same line as the substitute.  With
few exceptions, "p" can follow any command; no other multi-command
lines are legal.)
.PP
It's also legal to say
\fB
s/something//
\fR
which means "change 'something' to
.B
nothing,"
i.e., remove it.  This
is useful for deleting extra words in a line or
removing extra letters from words.  For instance,
if we had
\fB
Nowxx is the time
\fR
we can say
\fB
s/xx//p
\fR
to get
\fB
Now is the time
\fR
Notice that "//" here means "no characters", not
a blank.  There
.B
is
a difference!  (See below
for another meaning of "//".)
.SH
EXERCISE 5:
.PP
Experiment with the substitute command.  See what
happens if you substitute for some word on a line
with several occurrences of that word.  For
example, do this:
\fB
.EX
	a
	the other side of the coin
	.
	s/the/on the/p
.EE
\fR
You will get
\fB
on the other side of the coin
\fR
A substitute command changes only the first
occurrence of the first string.  You can change all
occurrences on the line by adding a "g" (for "global") to
the "s" command, like this:
\fB
s/.../.../gp
\fR
Try other characters instead of slashes to delimit the two
sets of characters in the "s" command - anything should
work except blanks or tabs.
.PP
(You will get funny results using any of the characters
\fB
%  ?  $  [  *  @
\fR
these will be explained in
the section on "Special Characters".)
.SH
CONTEXT SEARCHING - "/.../"
.PP
With the substitute command mastered, we can move on
to another highly important idea of
.ul
ed
- context searching.
.PP
Suppose we have our original three line text in the buffer:
\fB
Now is the time
for all good men
to come to the aid of their party.
\fR
Suppose we want to find the line that contains "their"
so we can change it to "the". Now with only three lines in the buffer,
it's pretty easy to keep track of what line the word "their"
is on.  But if the buffer contained several hundred lines, and
we'd been making changes, deleting and rearranging
lines, and so on, we would no longer really know what
this line number would be.  Context searching is simply a method
of specifying the desired line, regardless of what its number is,
by specifying some context on it.
.PP
The way we say "search for a line that contains this
particular string of characters" is to type
\fB
/string of characters we want to find/
\fR
For example, the
.ul
ed
line
\fB
/their/
\fR
is a context search which is sufficient to find the
desired line - it will locate the next occurrence of the
characters between slashes ("their").  It also sets dot
to that line and prints the line for verification:
\fB
to come to the aid of their party.
\fR
"Next occurrence" means that
.ul
ed
starts looking for the
string at line ".+1", searches to the end of the buffer,
then continues at line 1 and searches to line dot.  (That is,
the search "wraps around" from "$" to 1.)  It scans all the
lines in the buffer until it either finds the desired line or
gets back to dot again.  If the given string of characters
can't be found in any line,
.ul
ed
types the error message
\fB
?
\fR
Otherwise it prints the line it found.
.PP
We can do both the search for the desired line
.B
and
a substitution all at once, like this:
\fB
/their/s/their/the/p
\fR
which will yield
\fB
to come to the aid of the party.
\fR
There were three parts to that last command:  context search
for the desired line, make the substitution, print the line.
.PP
The expression "/their/" is a context search expression.
In their simplest form, all context search expressions are like this -
a string of characters surrounded by slashes.  Context searches are
interchangeable with line numbers, so they can be used by
themselves to find and print a desired line, or as line
numbers for some other command, like "s".  We used them both
ways in the examples above.
.PP
Suppose the buffer contains the three familiar lines
\fB
Now is the time
for all good men
to come to the aid of their party.
\fR
Then the
.ul
ed
line numbers
\fB
/Now/+1
/good/
/party/-1
\fR
are all context search expressions, and they all refer to the
same line (line 2).  To make a change in line 2, we could say
\fB
/Now/+1s/good/bad/
\fR
or
/good/s/good/bad/
\fR
or
\fB
/party/-1s/good/bad/
\fR
The choice is dictated only by convenience.  We could print
all three lines by, for instance
\fB
/Now/,/party/p
\fR
or
\fB
/Now/,/Now/+2p
\fR
or by any number of similar combinations.  The first one
of these might be better if we don't know how many lines
are involved.  (Of course, if there were only three lines
in the buffer, we could use
\fB
1,$p
\fR
but not if there were several hundred.)
.PP
The basic rule is:  a context search expression is
.B
the
same as a line number, so it can be used wherever a
line number is needed.
.SH
EXERCISE 6:
.PP
Experiment with context searching.  Try a body of text
with several occurrences of the same string of
characters, and scan through it using the same context search.
,PP
Try using context searches as line numbers for the
substitute, print and delete commands.  (They can also
be used with "r", "w", and "a".)
.PP
Try context searching using "\text\" instead of "/text/".
This scans lines in the buffer in reverse order rather than normal.
This is sometimes useful if you go too far while looking for
some string of characters - it's an easy way to back up.
.PP
(You will get funny results with any of the characters
\fB
%  ?  $  [  *  @
\fR
these will be explained in
the section on "Special Characters".)
.PP
.ul
ed
provides a shorthand for repeating a context search
for the same string.  For example, the
.ul
ed
line number
\fB
/string/
\fR
will find the next occurrence of "string".  It often
happens that this is not the desired line, so the search
must be repeated.  This can be done by typing merely
\fB
//
\fR
This shorthand stands for "the most recently used context
search expression."  It can also be used as the first string
of the substitute command, as in
\fB
/string1/s//string2/
\fR
which will find the next occurrence of "string1" and
replace it by "string2".  This can save a lot of typing.
Similarly
\fB
\\
\fR
means "scan backwards for the same expression."
.SH
CHANGE and INSERT - "c" and "i"
.PP
This section discusses the
.B
change
command
\fB
c
\fR
which is used to change or replace a group of one or more
lines, and the
.B
insert
command
\fB
i
\fR
which is used for inserting a group of one or more lines.
.PP
"Change", written as
\fB
c
\fR
is used to replace a number of lines with different lines,
which are typed in at the terminal.  For example, to
change lines ".+1" through "$" to something else, type
\fB
.EX
	.+1,$c
	...type the lines of text you want here...
	.
.EE
\fR
The lines you type between the "c" command and the "."
will take the place of the original lines between
start line and end line.  This is most useful in
replacing a line or several lines which have errors in them.
.PP
If only one line is specified in the "c" command, then
just that line is replaced.  (You can type in as many
replacement lines as you like.)  Notice the use of "." to end
the input - this works just like the "." in the append
command and must appear by itself on a new line.  If no line number
is given, line dot is replaced.  The value of dot is set to
the last line you typed in.
.PP
"Insert" is similar to append - for instance
\fB
.EX
	/string/i
	...type the lines to be inserted here...
	.
.EE
\fR
will insert the given text
.B
before
the next line that
contains "string".  The text between "i" and "." is
.B
inserted
before the specified line.  If no line
number is specified dot is used.  Dot is set to the last line inserted.
.SH
EXERCISE 7:
.PP
"Change" is rather like a combination of delete followed by
insert.  Experiment to verify that
\fB
.EX
	start, end d
	i
	...text...
	.
.EE
\fR
is almost the same as
\fB
.EX
	start, end c
	...text...
	.
.EE
\fR
These are not
.B
precisely
the same if line "$"
gets deleted.  Check this out.  What is dot?
.PP
Experiment with "a" and "i", to see that they are
similar, but not the same.
.ne 13
You will observe that
\fB
.EX
	line-number a
	...text..
	.
.EE
\fR
appends
.B
after
the given line, while
\fB
.EX
	line-number i
	...text...
	.
.EE
\fR
inserts
.B
before
it.  Observe that if no line number is
given, "i" inserts before line dot, while "a"
appends after line dot.
.SH
BROWSING:  the "b" command
.PP
Many times you want to look at several lines
of a large file
while you're using a video terminal.
If you said
\fB
1,$p
\fR
the whole buffer would flash on the screen, usually
too fast to read.  A better way is the browse
command "b".  It prints just enough lines (23)
to fill the CRT screen.  Browse has three major forms which control
what lines are displayed.  "b" or "b+" prints the current
line and the screen after it.  "b." prints the screen
centered on the current line and including it.
"b-" prints the screenful before the current line.
.SH
MOVING TEXT AROUND:  the "m" command
.PP
The move command "m" is used for cutting and pasting - it
lets you move a group of lines from one place to another
in the buffer.  Suppose we want to put the first three lines
of the buffer at the end instead.  We could do it by saying:
\fB
1,3w temp
$r temp
1,3d
\fR
(Do you see why?) but we can do it a lot easier with the "m"
command:
\fB
1,3m$
\fR
The general case is
\fB
start-line, end-line m after-this-line
\fR
Notice that there is a third line to be specified - the
place where the moved stuff gets put.  Of course the lines
to be moved can be specified by context searches; if we had
\fB
.EX
	First paragraph
	...
	end of first paragraph.
	Second paragraph
	...
	end of second paragraph.
.EE
\fR
we could reverse the two paragraphs like this:
\fB
/Second/,/second/m/First/-1
\fR
Notice the "-1" - the moved text goes
.B
after
the
line mentioned.  Dot gets set to the last line moved.
.SH
THE GLOBAL COMMAND "g"
.PP
The
.B
global
command "g" is used to execute an
.ul
ed
command on all those lines in the buffer that match some specified
string.  For example
\fB
g/peling/p
\fR
prints all lines that contain "peling".  More usefully,
\fB
g/peling/s//pelling/gp
\fR
makes the substitution everywhere on the line, then prints
each corrected line.  Compare this to
\fB
1,$s/peling/pelling/gp
\fR
which only prints the last line substituted.  Another subtle
difference is that the "g" command does not give a "?"
if "peling" is not found whereas the "s" command will.
.SH
SPECIAL CHARACTERS
.PP
You may have noticed that things just don't work right
when you used some characters like "?", "*", "$", and others
in context searches and the substitute command.  The reason is
rather complex, although  the cure is simple.  Basically,
.ul
ed
treats these characters as special, with special meanings.
For instance,
.B
in
a context search or the first
string of the substitute command only,
\fB
/x?y/
\fR
means "a line with an x,
.B
any
character, and a y,"
.B
not
just
"a line with an x, a question mark, and a y." 
A complete list of the special characters that can
cause trouble is the following:
\fB
%   .   $   [   *   @   #   !
\fR
.B
Warning:
The character @ is special to
.ul
ed.
For safety's sake, avoid it where possible.  If you have
to use one of the special characters in a
substitute command, you can turn off its magic meaning
temporarily by preceding it with the "at" sign.  Thus
\fB
s/@@@?@*/at quest star/
\fR
will change "@?*" into "at quest star".
.PP
Here is a hurried synopsis of the other special characters.
First, the percent "%" signifies the beginning
of a line.  Thus
\fB
/%string/
\fR
finds "string" only if it is at the beginning of a line:
it will find
\fB
string
\fR
.ne 3
but not
\fB
the string...
\fR
The dollar-sign "$" is just the opposite of the
percent sign; it means the end of a line:
\fB
/string$/
\fR
will only find an occurrence of "string" that is at
the end of some line.  This implies, of course,
that
\fB
/%string$/
\fR
will find only a line that contains just "string", and
\fB
/%?$/
\fR
finds a line containing exactly one character.
.PP
The character "?", as we mentioned above, matches anything;
\fB
/x?y/
\fR
matches any of
\fB
xay
x1y
x+y
x-y
x y
x.y
\fR
This is useful in conjunction with "*", which is a
repetition character; "a*" is shorthand for "any
number of a's", so "?*" matches any number of
anythings.  This is used like this:
\fB
s/?*/stuff/
\fR
which changes an entire line, or
\fB
s/?*,//
\fR
which deletes all characters in the line up to and
including the last comma.  (Since "?*" finds the longest
possible match, this goes up to the last comma.)
.PP
"[" is used with "]" to form "character classes";
for example,
\fB
/[1234567890]/
\fR
matches any single digit - any one of the characters
inside the braces will cause a match.
.PP
Finally, the "&" is another shorthand character - it is
used only on the right-hand part of a substitute command where
it means "whatever was matched on the left-hand side".  It is used
to save typing.  Suppose the current line contained
\fB
Now is the time
\fR
and we wanted to put parentheses around it.  We could
just retype the line, but this is tedious.  Or we could say
\fB
s/%/(/
s/$/)/
\fR
using our knowledge of "%" and "$".  But the easiest
way uses the "&":
\fB
s/?*/(&)/
\fR
This says "match the whole line, and replace it by itself
surrounded by parens."  The "&" can be used several times
in a line; consider using
\fB
s/?*/&. &!!/
\fR
to produce
\fB
Now is the time.  Now is the time!!
\fR
We don't have to match the whole line, of course:  if the
buffer contains
\fB
the end of the world
\fR
we could type
\fB
/world/s//& is at hand/
\fR
to produce
\fB
the end of the world is at hand
\fR
Observe this expression carefully, for it illustrates
how to take advantage of
.ul
ed
to save typing.  The
string "/world/" found the desired line; the
shorthand "//" found the same word in the line;
and the "&" saved us from typing it again.
.PP
The "&" is a special character only within the
replacement text of a substitute command, and has no
special meaning elsewhere.  We can turn off the special
meaning of "&" by preceding it with a "@":
\fB
s/ampersand/@&/
\fR
will convert the word "ampersand" into the literal
symbol "&" in the current line.
.SH
ACKNOWLEDGEMENT
.PP
The majority of this document has been taken, with
the author's permission, from
"A Tutorial Introduction to
the UNIX Text Editor" by B. W. Kernighan.
It has been changed
only to reflect
the differences between this editor and the UNIX version.
.SH
SUMMARY OF COMMANDS AND LINE NUMBERS
.PP
The general form of
.ul
ed
commands is the command name,
perhaps preceded by one or two line numbers, and, in the
case of
.B
e, r
and
.B
w,
followed by a file name.
Only one command is allowed per line, but a
.B
p
command may
follow any other command (except for
.B
e, r, w
and
.B
q).
.IP
.B
a
(append) Add lines to the buffer (at line dot,
unless a different line is specified).  Appending continues
until "." is typed on a new line.  Dot is set
to the last line appended.
.IP
.B
b
(browse) Display the next 23 lines of text, beginning at the current
line.  The current line will be centered if you use "b.".
Using "b-" will cause the previous 23 lines to be printed,
while "b+" will do the same as "b".
.IP
.B
c
(change) Change the specified lines to the new
text which follows.  The new lines are terminated by a ".".
If no lines are specified, replace line dot.  Dot is set to the last line
changed.
.IP
.B
d
(delete) Delete the lines specified. If none are
specified, delete line dot.  Dot is set to the first undeleted
line, unless "$" is deleted, in which case dot is set to "$".
.IP
.B
e
(edit) Edit new file.  Any previous contents of the buffer
are thrown away, so issue a
.B
w
beforehand if you
want to save them.
.IP
.B
f
(file) Print remembered filename.  If a name follows
.B
f
the remembered name will be set to it.
.IP
.B
g
(global) g/---/command will execute the command on
those lines that contain "---", which can be
any context search expression.
.IP
.B
i
(insert) Insert lines before specified line (or dot)
until a "." is typed on a new line.  Dot is set to the last line inserted.
.IP
.B
m
(move) Move lines specified to after the line named after
.B
m.
Dot is set to the last line moved.
.IP
.B
p
(print) Print specified lines.  If none specified,
print line dot.  A single line number is equivalent to "line-number p".
A single newline prints ".+1", the next line.
.IP
.B
q
(quit) Exit from ed.  Wipes out all text in the buffer!!
.IP
.B
r
(read) Read a file into the buffer (at end unless specified
elsewhere.)  Dot is set to last line read.
.IP
.B
s
(substitute) s/string1/string2/ will substitute the
characters of 'string2' for 'string1' in specified lines.
If no line is specified, make substitution in line dot.
Dot is set to the last line in which a substitution took place,
which means that if no substitution took place,
dot is not changed.
.B
s
changes only the first occurrence
of string1 on a line;
to change all of them, type a "g" after the final slash.
.IP
.B
w
(write) Write out buffer onto a file.  Dot is not changed.
.IP
.B
.EX
	.=
.EE
(dot value) Print value of dot.  ("=" by itself
prints the value of "$".)
.IP
.B
/---/
Context search.  Search for the next line that
contains this string of characters.  Print it.  Dot is set to
line where the string was found.  Search starts at ".+1", wraps around from
"$" to 1, and continues to dot, if necessary.
.IP
.B
\---\
Context search in reverse direction.  Start the search at
".-1", scan to 1, wrap around to "$".
