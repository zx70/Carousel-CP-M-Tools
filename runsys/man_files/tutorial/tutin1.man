.TL
INTRODUCTION TO THE SOFTWARE TOOLS
.TE
.sp 2
.ce 10
Adapted with the author's permission, from
"UNIX for Beginners - Second Edition"
Brian Kernighan
Bell Laboratories
Murray Hill, NJ
.ce 0
.sp 3
.H1
INTRODUCTION
.eh 'Intro to the Tools''Tutorial Section'
.oh 'Tutorial Section''Intro to the Tools'
.PP
One of the problems that people encounter in
their everyday use of computers is the lack of common utilities
on different computer systems.
The utilities in Kernighan and Plauger's
.ul
Software Tools
are a step toward a solution.
A common editor, text formatter, sorter, and other
Tools are now available on many systems.
.PP
The Software Tools package consists of utilities and a program
library modelled after those of the UNIX operating system.
Although many of the utilities originated with the Kernighan and
Plauger book,
sites all over the world have contributed significant enhancements
and new Tools.
.PP
From the user's point of the view, the utilities
are reasonably easy to learn and use,
and present few of the usual impediments
to getting the job done.
It is hard, however, for the beginner to know where to start, and how
to make the best use of the facilities available.
The purpose of this introduction is to help new users get used to the
main ideas of the package and start making effective use of it
quickly.
.PP
You should have a couple of other documents with you for easy reference
as you read this one.
The most important is
.ul
this manual;
it's often easier to tell you to read about something in the manual
than to repeat its contents here.
The other useful document is
.ul
A Tutorial Introduction to the Software Tools Text Editor,
which is included in the Tutorial section of this manual.
.PP
A word of warning:  the Software Tools package has become quite popular,
and there are several variants in use.
Details also change with time.
So although the basic structure of the Tools and how to use them is
common to all versions, there will certainly be a few things
which are different on other systems from what is described here.
This document describes the Tools as distributed by Carousel MicroTools.
System specific information is in the section of this manual titled
"System-Specific."
.PP
This document has five sections: 
.NP
Getting Started:  How to access the Tools.
.NP
Day-to-day Use:  Things you need every day
to use the system effectively;
generally useful commands;
dealing with files.
.NP
Text Manipulation and Document Preparation: 
Preparing manuscripts and managing text are some of the most common
uses for the Software Tools.
This section contains instructions on using a few of the text
manipulation Tools, plus advice on preparing text for formatting.
.NP
Writing Programs: 
This section talks about some of the programming aids available
and some of the conventions and philosophy used in writing the Tools.
.NP
A Software Tools Reading List: 
An annotated bibliography of documents that new users should be
aware of.
.H1
1. GETTING STARTED
.H2
Logging On
.PP
Perform the necessary incantations to log into your system.
The culmination of your login efforts is some sort of "prompt" or
indication from your system that it is ready to accept commands
from you.
The Tools may be accessed either through the
local command interpreter or from the
.I shell
(the UNIX-like
command interpreter available with the package).
The shell is usually started by typing: 
.DS
sh
.DE
The shell indicates its readiness to accept commands by
typing the prompt character "%".
.H2
Typing Commands
.PP
Once you've seen the shell's prompt, you can type commands,
which are requests that the system do something.
Try typing
.DS
echo Hi There
.DE
followed by RETURN.
.I echo
is a Tool which simply prints back to you its command
arguments.
So you should get back: 
.DS
Hi There
.DE
Don't forget the RETURN after the command or nothing will happen.
If you think you're being ignored, type a RETURN;
something should happen.
RETURN won't be mentioned again, but don't forget it--it has to
be there at the end of each line.
.PP
Another command you might try is
.I date,
which tells you the current date: 
.DS
date
.DE
You should get back something like
.DS
8/26/83 12:07:15
.DE
.PP
Systems which can't keep track of the time because they don't have
clocks often use
.I date
to also set the date.
If you got no answer when you typed
.I date,
your system is
probably like that.
Try typing
.DS
date 8/26/83 12:05:39
.DE
and then try again
.DS
date
.DE
On these systems time will stand still unless you frequently reset it.
.PP
If you make a mistake typing the command name and refer to a non-existent
command, you will be told.
For example, if you type
.DS
daytime
.DE
you will receive a message something like
.DS
daytime: not found
.DE
Of course, if you inadvertently type the name of some other command,
it will run, with more or less mysterious results.
.H2
Mistakes in Typing
.PP
If you make a typing mistake and see it before RETURN has been typed,
there are a couple ways to recover.
Most systems allow you to backspace or erase characters you have typed.
Often you simply hit the BACKSPACE key on your terminal.
Other systems might use the DELETE key, or CTRL-H (hold the CONTROL
key down while pressing h).
Most systems also have some way to erase an entire line and start
over again.
Check the System Specific section of the manual for details.
.H2
Read-ahead
.PP
Some systems have full read-ahead, which means that you can type
as fast as you want, whenever you want,
even when some command is running or typing at you.
If you type during output, your input characters may appear
intermixed with the output characters,
but they will be stored away and interpreted in the correct order.
So you can type several commands one after another without waiting
for the first to finish (or even begin).
Check your computer manufaturers literature to make sure this is available
on your system.
.H2
Stopping a Program
.PP
There are generally 2 ways to stop a program: 
.NP
When a program is reading input from your terminal, you indicate that
you are done by typing a special end-of-file character.
This is often a control character such as CTRL-D or CTRL-Z.
.NP
When a program is running amuck, or you change your mind
and want to stop it instantly, most systems allow you to type
an interrupt or abort character such as DELETE or ESCAPE.
This character will immediately stop the Tool and cancel any
further processing.
Check the System Specific section of this manual for the appropriate character.
.PP
The Software Tools shell can be stopped by typing your local
end-of-file character or by typing the word
.DS
logout
.DE
.H2
On-Line Help
.PP
If you know how to use a program, but have forgotten
what arguments it expects, you can generally type
the name of the Tool followed by a question mark,
which will give you the calling sequence for the Tool.
For instance,
.DS
echo ?
.DE
will result in the message
.DS
usage:  echo [args]
.DE
.H1
2. DAY-TO-DAY USE
.H2
Creating Files - The Editor
.PP
If you have to type a paper or a letter or a program,
how do you get the information stored in the machine? 
Most of these tasks are done with the text editor
.I ed.
Since
.I ed
is thoroughly documented in the manual and
explained in
.ul
A Tutorial Introduction to the Software Tools Text Editor
in the Tutorial section;
we won't spend time here describing how to use it.
All we want it for right now is to make some files.
(A file is just a collection of information stored in the machine.)
.PP
To create a file called
.I junk
with some text in it, do the following: 
.DS
ed junk		(invokes the text editor on file "junk")
a		(command to "ed", to add text)
this is the text
you want in the file
.cc +
.
+cc .
.DE
The "." that signals the end of adding text must be on
a line by itself.
Don't forget it, for until it is typed,
no other
.I ed
commands will be recognized - everything you type will be
treated as text to be added.
.PP
At this point you can do various editing operations on the lines
you typed in,
such as correcting spelling mistakes,
rearranging paragraphs
and the like.
Finally, you must write the information you have typed
into a file with the editor command
.bd
w
.DS
w
.DE
.I ed
will respond with the number of lines it wrote into the file
.I junk.
.PP
Until you enter the
.bd
w
command nothing is stored permanently,
so if you disconnect, the information is lost.
But after
.bd
w
the information is there permanently;
you can re-access it any time by typing
.DS
ed junk
.DE
Type a
.bd
q
to quit the editor.
(If you try to quit without writing,
.I ed
will print a message to remind you.
A second
.bd
q
gets you out regardless.)
.PP
Now create a second file called
.I temp
in the same manner.
You should now have two files,
.I junk
and
.I temp.
.H2
What files are out there?
.PP
The
.I ls
(for "list") command lists the names (not contents) of any of
the files that your system knows about.
If you type
.DS
ls
.DE
the response will be
.DS
junk
temp
.DE
which are indeed the two files just created.
On some systems, the filenames are sorted into alphabetical
order automatically.
And, on some systems, other variations are possible.
For example,
.DS
ls -v
.DE
.RB ( v
for "verbose") which would print additional information
about the files, such as their size.  Details about additional
options your system allows
can be found in the Tool Description section of the manual.
.PP
The use of optional arguments that begin with a minus sign,
like
.bd
-v,
is a common convention for the Software Tools.
In general, if a program accepts such optional arguments,
they precede any filename arguments.
It is also vital that you separate the various arguments
with spaces: 
.B ls-v
is not the same as
.B ls
.BR -v .
.H2
What's in a File Name?
.PP
So far we have used filenames without ever saying what's a legal
name.
Most systems limit filenames to a small number of characters.
Others divide filenames
into 2 or more parts separated by
a specific character such as a dot.
Finally, many systems limit filenames to alphanumeric
characters alone.
Consult the System Specific section for information about
filenames on your system.
.PP
It is sometimes useful to decide on some file naming conventions
for yourself, to help you organize your files.
You might want to have all working files begin with "temp",
or all ratfor source programs end with "rat".
If you do choose to do this,
.I ls
can help you keep track of your files by only listing those
file names which include certain patterns.
For instance,
.DS
ls rat
.DE
would print all filenames that included the string "rat".
You can ask
.I ls
to look for several patterns: 
.DS
ls temp working
.DE
which would list all files that included the pattern "temp"
OR the pattern "working" anywhere in their names.
There are even more sophisticated ways for you to specify
patterns to match.
These will be discussed in more detail later on.
.H2
Looking at the Contents of Files
.PP
Now that you've got a file of text, how do you print it so people
can look at it? 
There are several programs that do that.
One simple way is to use the editor,
since printing is often done just before making changes anyway.
You can say
.DS
ed junk
1,$p
.DE
(The "$" signifies the last line of the file.) 
.I ed
will reply with the count of the lines in
.I junk
and then print all the lines in the file.
After you learn how to use the editor, you can
be selective about the parts you print.
.PP
There are times when it's not feasible to use the editor for printing.
For example, there is a limit on how big a file
.I ed
can handle.
Secondly, it will only print one file at a time,
and sometimes you want to print several, one after another.
So here are a couple of alternatives.
.PP
First is
.I cat,
the simplest of all the printing programs.
.I cat
simply prints on the terminal the contents of all the files named
in a list.
Thus
.DS
cat junk
.DE
prints one file, and
.DS
cat junk temp
.DE
prints two.
The files are simply concatenated (hence the name "cat") onto the terminal.
.PP
If you
.I cat
a file which is more than one screenful long, it may scroll off the
end of your screen before you have a chance to read it.
The Tool
.I crt
is just like
.I cat
only it will wait at the end of every screenful before going ahead.
When you are ready to see more lines, hit RETURN and
.I crt
will proceed with the next bunch.
Or, when you have seen as much of the file as you want, type
.DS
q
.DE
to quit.
.PP
Another Tool,
.I pr,
produces paginated printouts of files.
As with
.I cat,
.I pr
prints all the files named in a list.
The difference is that it produces headings with
the date, time, page number, and filename at the top
of each page, and extra lines to skip over the fold in the paper.
Thus
.I pr
is useful for preparing files to go to your printer.
(How you actually send files to your printer differs from
machine to machine.
See the "Beginners Introduction" for the appropriate
action on your system.)  The command
.DS
pr junk temp
.DE
will print
.I junk
neatly on your terminal, then skip to the top of a new "page" and print
.I temp
neatly.
.PP
Note that
.I pr
is NOT a formatting program in the sense of shuffling lines
around and justifying margins.
The true formatter is
.I format,
which we will get to in the section on document preparation.
.H2
Shuffling Files About
.PP
Now that you have some files in the file system and some experience in
printing them,
you can try bigger things.
For example, you can move a file from one place to another (which
amounts to giving it a new name), like this: 
.DS
mv junk precious
.DE
This means that what used to be
.I junk
is now
.I precious.
If you do an
.I ls
command now, you will get
.DS
precious
temp
.DE
Beware that if you move a file to another one that already exists,
the already existing contents are lost forever.
.PP
If you want to make a copy
of a file (that is, to have two versions of something),
you can again use the
.I cat
command: 
.DS
cat precious >temp1
.DE
which makes a duplicate copy of
.I precious
in
.I temp1
(The sign ">" indicates a redirected output, and will be
explained later.)
.PP
Finally, when you get tired of creating and moving files,
there is a command to remove files from the file system, called
.I rm.
.DS
rm temp temp1
.DE
will remove both of the files named.
.PP
You will get a warning message if one of the named files wasn't there,
but otherwise
.I rm
does its work silently.
There is no prompting or chatter, and error messages are
occasionally curt.
This terseness, common to most of the Tools,
is sometimes disconcerting to newcomers,
but experienced users find it desirable.  Just remember that no news
is good news.
.H2
Using Files Instead of the Terminal
.PP
Most of the commands we have seen so far produce output on the terminal;
some, like the editor, also take their input from the terminal.
It is universal in the Software Tools that the terminal can be
replaced by a file for either or both of input and output.
As one example,
.DS
ls
.DE
makes a list of files on your terminal.
But if you say
.DS
ls >filelist
.DE
a list of your files will be placed in the file
.I filelist
(which will be created if it doesn't already exist,
or overwritten if it does).
The symbol ">" means "put the output on the following file,
rather than on the terminal." 
Nothing is produced on the terminal.
As another example, you could combine several files into one
by capturing the output of
.I cat
in a file: 
.DS
cat f1 f2 f3  >temp
.DE
.PP
The symbol ">>" operates very much like ">" does,
except that it means "add to the end of." 
That is,
.DS
cat f1 f2 f3  >>temp
.DE
means to concatenate
.ul
f1, f2,
and
.I f3
to the end of whatever is
already in
.I temp,
instead of overwriting the existing contents.
As with ">", if
.I temp
doesn't exist, it will be created for you.
.PP
In a similar way, the symbol "<" means to take the
input for a program from the following file,
instead of from the terminal.
Thus, you could make up a script of commonly used editing
commands and put them into a file called
.I script.
Then you can run the script on a file by saying
.DS
ed file <script
.DE
.H2
Managing Files
.PP
Now that you've learned to create files, list their names, look
at them, and otherwise manipulate them,
perhaps you'd also like some suggestions on managing and grouping them.
For instance, suppose you are typing a large document like a book.
Logically this divides into many small pieces like chapters and
perhaps sections.
Physically it must be divided too, for
.I ed
will not handle really big files.
Thus you should type the document as a number of small files.
You might choose to have a separate file for each chapter, called
.DS
chap1
chap2
etc.
.DE
You would also like a way to group these files together so you
can deal with them as a unit and so you can tell them apart in
case you are writing several books containing a
.ul
chap1, chap2,
etc.  To do this, some operating systems, such as UNIX,
provide what is called
a "hierarchical" file system.
This type of file system allows you to store files much like you
would store something in a filing cabinet - drawers with labels
containing file folders with labels containing other folders
with labels, etc.
However, most operating systems do not allow you to manage files this way.
Rather, these "flat" file systems look more like a desktop,
with documents scattered around it, one level deep.
If you have this sort of system,
you might want to use some sort of Tool to group your documents together,
much like organizing the files on a desk into stacks.
.PP
The
.I ar
archiver is a Tool whose purpose is to collect
sets of text files into one big file and to maintain that
file as an "archive".
This often saves storage space and, more important,
gives you a handle by which you can deal with a group of related
files all at once.
Files can be extracted from the archive, new ones can be added,
old ones can be deleted or replaced by updated versions,
and data about the contents can be listed.
.PP
The archiver is much like a library room full of important
documents, with a Xerox machine at the door.
To add a document to the library,
you ask the librarian to Xerox it and keep a copy in the room.
You may then discard the original, since the copy is
being carefully maintained.
When you want to extract a document from the library,
you ask the library to make a Xerox of it for you.
If you make changes to the document, you
then give it back to the librarian,
who Xeroxes it and replaces the old version with the new.
.PP
Now, to use the archiver on the computer to maintain
a document, perhaps your book,
you would create an archive containing all the chapters
by using the "update" command: 
.DS
ar -u book chap1 chap2 chap3 ...
.DE
This would collect
.ul
chap1, chap2, chap3,
etc. together into an archive file called
.I book.
Since the archive
.I book
now contains copies of
.ul
chap1, chap2,
and
.I chap3,
you can safely remove them from your directory: 
.DS
rm chap1 chap2 chap3
.DE
.PP
If you want to see a list of what you've got in
.I book,
in case you've forgotten, you would use the table-of-contents command: 
.DS
ar -t book
.DE
This would cause the archiver to print out: 
.DS
chap1
chap2
chap3
.DE
Then, when you want to work on a specific chapter
you would extract (-x) it from the archive: 
.DS
ar -x book chap2
ed chap2
.DE
And, when you're done editing
.I chap2,
put it back: 
.DS
ar -u book chap2
rm chap2
.DE
(Remember, the call to
.I rm
removes
.I chap2
from the file system but not, of course, from
the archive.)
.PP
Finally, if you would like to print the entire book on your
terminal, you would use the
.I print
command: 
.DS
ar -p book
.DE
which would print all the chapters in the archive.
.PP
The archiver is by no means a substitute for a hierarchical
file system,
but it does go a long way in helping you organize your files.
It can also save disk space, especially with small files.
.H2
The Shell
.PP
We have already mentioned once or twice the mysterious "shell",
which is in fact just another Tool.
The shell is the program that interprets what you type as commands
and arguments.
You can stack Tools together and combine them in interesting
ways that are not usually available with local command interpreters.
