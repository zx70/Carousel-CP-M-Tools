#####      define statement and symbol table
##### routines in this group are getdef, instal, lookup, hshfcn, tbinit
##### (instal, lookup, hshfct, and tbinit are in the general
#####  purpose library)

# getdef (for no arguments) - get name and definition
   subroutine getdef(token, toksiz, defn, defsiz, fd)
   character gtok, ngetch
   integer defsiz, fd, i, nlpar, toksiz
   character c, defn(MAXDEF), token(MAXTOK), t, ptoken(MAXTOK)

   call skpblk(fd)
   c = gtok(ptoken, MAXTOK, fd)
   if (c == LPAREN)
      t = LPAREN             # define (name, defn)
   else {
      t = BLANK              # define name defn
      call pbstr(ptoken)
      }
   call skpblk(fd)
   if (gtok(token, toksiz, fd) ^= ALPHA)
      call baderr("non-alphanumeric name.")
   call skpblk(fd)
   c = gtok(ptoken, MAXTOK, fd)
   if (t == BLANK) {         # define name defn
      call pbstr(ptoken)
      i = 1
      repeat {
         c = ngetch(c, fd)
         if (i > defsiz)
            call baderr("definition too long.")
         defn(i) = c
         i = i + 1
         } until (c == SHARP | c == NEWLINE | c == EOF)
      if (c == SHARP)
         call putbak(c)
      }
   else if (t == LPAREN) {   # define (name, defn)
      if (c ^= COMMA)
         call baderr("missing comma in define.")
      # else got (name,
      nlpar = 0
      for (i = 1; nlpar >= 0; i = i + 1)
         if (i > defsiz)
            call baderr("definition too long.")
         else if (ngetch(defn(i), fd) == EOF)
            call baderr("missing right paren.")
         else if (defn(i) == LPAREN)
            nlpar = nlpar + 1
         else if (defn(i) == RPAREN)
            nlpar = nlpar - 1
         # else normal character in defn(i)
      }
   else
      call baderr("getdef is confused.")
   defn(i-1) = EOS
   return
   end
